name: Build and Release on macOS and Windows

on:
  push:
    tags:
      - 'v*'  # triggers on tags like v1.0.0 or v1.0.0-beta
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        shell: bash
        run: |
          curl -sSL https://install.python-poetry.org | python -
          echo "${HOME}/.local/bin" >> $GITHUB_PATH

      - name: Build project
        shell: bash
        run: make
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: Flowfile-mac-dmg
          path: flowfile_frontend/dist/Flowfile-*-arm64.dmg

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        shell: pwsh
        run: |
          (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -
          echo "$env:APPDATA\Python\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install Python dependencies
        shell: pwsh
        run: |
          poetry install # If polars-sim is a poetry dependency, it might still be installed here unless removed from pyproject.toml

      # Removed: Check for cached polars-sim wheel
      # Removed: Check if wheel files exist
      # Removed: Build polars-sim wheel if needed
      # Removed: Install polars-sim into Poetry environment

      - name: Build Python services
        shell: pwsh
        run: |
          poetry run build_backends

      - name: Build Electron app
        shell: pwsh
        run: |
          cd flowfile_frontend
          npm install
          npm run build
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload EXE artifact
        uses: actions/upload-artifact@v4
        with:
          name: Flowfile-windows-exe
          path: flowfile_frontend/dist/Flowfile*.exe

  release:
    needs: [build-macos, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          files: |
            Flowfile-mac-dmg/Flowfile-*-arm64.dmg
            Flowfile-windows-exe/Flowfile*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Log release information
        run: |
          echo "GitHub Release created."
          echo "Tag: ${{ github.ref_name }}"
          echo "Release ID: ${{ steps.create_release.outputs.id }}"
          echo "Assets have been uploaded to the GitHub Release."