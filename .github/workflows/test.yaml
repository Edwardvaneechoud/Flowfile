name: Run Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  backend-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python-version: "3.10"
          - os: ubuntu-latest
            python-version: "3.11"
          - os: ubuntu-latest
            python-version: "3.12"
          - os: macos-latest
            python-version: "3.11"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker on macOS
        if: runner.os == 'macOS'
        run: | # Add any specific Docker setup commands if needed, or remove if not

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'  # Enable pip caching

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH

      - name: Install Dependencies
        run: |
          poetry install --no-interaction --no-ansi --with dev

      - name: Build Vue app for web
        run: |
          cd flowfile_frontend
          npm install
          npm run build:web
          
          # Create the static directory if it doesn't exist
          mkdir -p ../flowfile/flowfile/web/static

          # Copy the built files to the Python package
          cp -r build/renderer/* ../flowfile/flowfile/web/static/

      - name: Start Mock Database with Sample Data
        run: poetry run start_postgres

      - name: Start Mock S3 bucket with Sample Data
        run: poetry run start_minio

      - name: Run pytest for flowfile_frame
        run: poetry run pytest flowfile_frame/tests --disable-warnings

      - name: Run pytest for flowfile_core
        run: poetry run pytest flowfile_core/tests --disable-warnings

      - name: Run pytest for flowfile_worker
        run: poetry run pytest flowfile_worker/tests --disable-warnings

      - name: Stop Mock Database
        run: poetry run stop_postgres

      - name: Stop Mock S3 bucket
        run: poetry run stop_minio

      - name: Run pytest for flowfile
        shell: pwsh
        run: poetry run pytest flowfile/tests --disable-warnings

  backend-tests-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'  # Enable pip caching

      - name: Install Poetry
        shell: pwsh
        run: |
          (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -
          echo "$env:APPDATA\Python\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install Dependencies
        shell: pwsh
        run: |
          poetry install --no-interaction --no-ansi --with dev

      - name: Build Vue app for web
        shell: pwsh
        run: |
          cd flowfile_frontend
          npm install
          npm run build:web
          
          # Create the static directory if it doesn't exist
          New-Item -ItemType Directory -Force -Path ../flowfile/flowfile/web/static | Out-Null

          # Copy the built files to the Python package
          Copy-Item -Path build/renderer/* -Destination ../flowfile/flowfile/web/static/ -Recurse -Force

      - name: Start Mock Database with Sample Data
        shell: pwsh
        run: poetry run start_postgres

      - name: Start Mock S3 bucket with Sample Data
        shell: pwsh
        run: poetry run start_minio

      - name: Run pytest for flowfile_frame
        shell: pwsh
        run: poetry run pytest flowfile_frame/tests --disable-warnings

      - name: Run pytest for flowfile_core
        shell: pwsh
        run: poetry run pytest flowfile_core/tests --disable-warnings

      - name: Run pytest for flowfile_worker
        shell: pwsh
        run: poetry run pytest flowfile_worker/tests --disable-warnings

      - name: Stop Mock Database
        shell: pwsh
        run: poetry run stop_postgres

      - name: Stop Mock S3 bucket
        shell: pwsh
        run: poetry run stop_minio

      - name: Run pytest for flowfile
        shell: pwsh
        run: poetry run pytest flowfile/tests --disable-warnings



  test-web:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: flowfile_frontend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'flowfile_frontend/package-lock.json'

      - name: Install Node Dependencies
        run: npm ci

      - name: Build Web Version
        run: npm run build:web

      - name: Run Vite Preview and Check Port Availability
        run: |
          # Start the preview server in the background
          npm run preview:web &
          # Wait for the server to fully start
          sleep 10
          # Verify that the server responds with a 200 OK on port 4173
          if ! curl -sI http://localhost:4173 | grep -q "200 OK"; then
            echo "Port 4173 is not available or did not return 200 OK"
            exit 1
          fi

  electron-tests-macos:
    runs-on: macos-latest
    needs: # Ensure these needs are still appropriate or adjust as necessary
      - backend-tests
      - test-web
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'flowfile_frontend/package-lock.json'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Poetry
        shell: bash
        run: |
          curl -sSL https://install.python-poetry.org | python -
          echo "${HOME}/.local/bin" >> $GITHUB_PATH

      - name: Install Python dependencies
        run: |
          poetry install --with dev

      - name: Build Python services
        run: |
          poetry run build_backends

      - name: Build Electron app for testing
        working-directory: flowfile_frontend
        run: |
          npm install
          npm run build:test

      - name: Run integration tests
        working-directory: flowfile_frontend
        run: |
          npm run test

  e2e-docker-test:
    runs-on: ubuntu-latest
    needs:
      - backend-tests
      - test-web
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and run Docker Compose
        run: |
          docker compose -f docker-compose.test.yml up --build --abort-on-container-exit

  electron-tests-windows:
    runs-on: windows-latest
    needs: # Ensure these needs are still appropriate or adjust as necessary
      - backend-tests # Assuming backend-tests is what you meant, not backend-tests (which doesn't exist)
      - test-web
      - backend-tests-windows
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'flowfile_frontend/package-lock.json'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Poetry
        shell: pwsh
        run: |
          (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -
          echo "$env:APPDATA\Python\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install Python dependencies
        shell: pwsh
        run: |
          poetry install

      - name: Build Python services
        shell: pwsh
        run: |
          poetry run build_backends

      - name: Build Electron app for testing
        shell: pwsh
        working-directory: flowfile_frontend
        run: |
          npm install
          npm run build:test

      - name: Run integration tests
        shell: pwsh
        working-directory: flowfile_frontend
        run: |
          npm run test