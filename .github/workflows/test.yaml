name: Run Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-polars-sim:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.11"]
        include:
          - os: ubuntu-latest
            python-version: "3.10"
          - os: ubuntu-latest
            python-version: "3.12"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      # Check if polars-sim wheel is already cached with a more efficient key
      - name: Check for cached polars-sim wheel
        id: check-wheel-cache
        uses: actions/cache@v3
        with:
          path: ./polars_sim_wheel
          key: polars-sim-wheel-${{ runner.os }}-python-${{ matrix.python-version }}

      # Build the wheel only if needed for Linux/macOS
      - name: Build polars-sim wheel if needed (Linux/macOS)
        if: steps.check-wheel-cache.outputs.cache-hit != 'true' && runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p ./polars_sim_wheel
          pip wheel git+https://github.com/edwardvaneechoud/polars_sim.git@main -w ./polars_sim_wheel
          echo "Wheels after building:"
          ls -la ./polars_sim_wheel

      # Build the wheel only if needed for Windows
      - name: Build polars-sim wheel if needed (Windows)
        if: steps.check-wheel-cache.outputs.cache-hit != 'true' && runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -Path "./polars_sim_wheel" -ItemType Directory -Force
          pip wheel git+https://github.com/edwardvaneechoud/polars_sim.git@main -w ./polars_sim_wheel
          Write-Output "Wheels after building:"
          Get-ChildItem -Path "./polars_sim_wheel"

  backend-tests:
    runs-on: ${{ matrix.os }}
    needs: build-polars-sim
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python-version: "3.10"
          - os: ubuntu-latest
            python-version: "3.11"
          - os: ubuntu-latest
            python-version: "3.12"
          - os: macos-latest
            python-version: "3.11"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker on macOS
        if: runner.os == 'macOS'
        run: |
          brew install docker
          brew install colima
          colima start
          # Verify Docker is working
          docker version

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'  # Enable pip caching

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH

      - name: Install Dependencies
        run: |
          poetry install --no-interaction --no-ansi

      # Restore cached polars-sim wheel
      - name: Restore polars-sim wheel
        uses: actions/cache@v3
        with:
          path: ./polars_sim_wheel
          key: polars-sim-wheel-${{ runner.os }}-python-${{ matrix.python-version }}

      # Install polars-sim directly into Poetry's virtual environment
      - name: Install polars-sim into Poetry environment
        run: |
          # Get the path to the Poetry virtual environment
          VENV_PATH=$(poetry env info -p)
          echo "Poetry virtual environment: $VENV_PATH"
          
          # Install polars-sim directly into the Poetry virtual environment
          $VENV_PATH/bin/pip install --no-index --find-links=./polars_sim_wheel polars_sim
          
          # Verify the installation
          poetry run pip list | grep polars
          poetry run python -c "import polars_sim; print('polars_sim successfully imported')"

      - name: Start Mock Database with Sample Data
        run: poetry run start_postgres

      - name: Run pytest for flowfile_worker
        run: poetry run pytest flowfile_worker/tests --disable-warnings

      - name: Run pytest for flowfile_core
        run: poetry run pytest flowfile_core/tests --disable-warnings

      - name: Stop Mock Database
        run: poetry run stop_postgres

  backend-tests-windows:
    runs-on: windows-latest
    needs: build-polars-sim
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'  # Enable pip caching

      - name: Install Poetry
        shell: pwsh
        run: |
          (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -
          echo "$env:APPDATA\Python\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install Dependencies
        shell: pwsh
        run: |
          poetry install --no-interaction --no-ansi

      # Restore cached polars-sim wheel
      - name: Restore polars-sim wheel
        uses: actions/cache@v3
        with:
          path: ./polars_sim_wheel
          key: polars-sim-wheel-${{ runner.os }}-python-3.11

      # Install polars-sim directly into Poetry's virtual environment
      - name: Install polars-sim into Poetry environment
        shell: pwsh
        run: |
          # Get the path to the Poetry virtual environment
          $VENV_PATH = $(poetry env info -p)
          Write-Output "Poetry virtual environment: $VENV_PATH"
          
          # Install polars-sim directly into the Poetry virtual environment
          & "$VENV_PATH\Scripts\pip" install --no-index --find-links=./polars_sim_wheel polars_sim
          
          # Verify the installation
          poetry run pip list | findstr polars
          poetry run python -c "import polars_sim; print('polars_sim successfully imported')"

      - name: Start Mock Database with Sample Data
        shell: pwsh
        run: poetry run start_postgres

      - name: Run pytest for flowfile_worker
        shell: pwsh
        run: poetry run pytest flowfile_worker/tests --disable-warnings

      - name: Run pytest for flowfile_core
        shell: pwsh
        run: poetry run pytest flowfile_core/tests --disable-warnings

      - name: Stop Mock Database
        shell: pwsh
        run: poetry run stop_postgres


  test-web:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: flowfile_frontend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'flowfile_frontend/package-lock.json'

      - name: Install Node Dependencies
        run: npm ci

      - name: Build Web Version
        run: npm run build:web

      - name: Run Vite Preview and Check Port Availability
        run: |
          # Start the preview server in the background
          npm run preview:web &
          # Wait for the server to fully start
          sleep 10
          # Verify that the server responds with a 200 OK on port 4173
          if ! curl -sI http://localhost:4173 | grep -q "200 OK"; then
            echo "Port 4173 is not available or did not return 200 OK"
            exit 1
          fi

  electron-tests-macos:
    runs-on: macos-latest
    needs:
      - backend-tests
      - test-web
      - build-polars-sim
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'flowfile_frontend/package-lock.json'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Poetry
        shell: bash
        run: |
          curl -sSL https://install.python-poetry.org | python -
          echo "${HOME}/.local/bin" >> $GITHUB_PATH

      - name: Install Python dependencies
        run: |
          poetry install

      # Restore cached polars-sim wheel
      - name: Restore polars-sim wheel
        uses: actions/cache@v3
        with:
          path: ./polars_sim_wheel
          key: polars-sim-wheel-${{ runner.os }}-python-3.11

      # Install polars-sim directly into Poetry's virtual environment
      - name: Install polars-sim into Poetry environment
        run: |
          # Get the path to the Poetry virtual environment
          VENV_PATH=$(poetry env info -p)
          echo "Poetry virtual environment: $VENV_PATH"
          
          # Install polars-sim directly into the Poetry virtual environment
          $VENV_PATH/bin/pip install --no-index --find-links=./polars_sim_wheel polars_sim
          
          # Verify the installation
          poetry run pip list | grep polars
          poetry run python -c "import polars_sim; print('polars_sim successfully imported')"

      - name: Build Python services
        run: |
          poetry run build_backends

      - name: Build Electron app for testing
        working-directory: flowfile_frontend
        run: |
          npm install
          npm run build:test

      - name: Run integration tests
        working-directory: flowfile_frontend
        run: |
          npm run test

  electron-tests-windows:
    runs-on: windows-latest
    needs:
      - backend-tests
      - test-web
      - build-polars-sim
      - backend-tests-windows
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'flowfile_frontend/package-lock.json'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Poetry
        shell: pwsh
        run: |
          (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -
          echo "$env:APPDATA\Python\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install Python dependencies
        shell: pwsh
        run: |
          poetry install

      # Restore cached polars-sim wheel
      - name: Restore polars-sim wheel
        uses: actions/cache@v3
        with:
          path: ./polars_sim_wheel
          key: polars-sim-wheel-${{ runner.os }}-python-3.11

      # Install polars-sim directly into Poetry's virtual environment
      - name: Install polars-sim into Poetry environment
        shell: pwsh
        run: |
          # Get the path to the Poetry virtual environment
          $VENV_PATH = $(poetry env info -p)
          Write-Output "Poetry virtual environment: $VENV_PATH"
          
          # Install polars-sim directly into the Poetry virtual environment
          & "$VENV_PATH\Scripts\pip" install --no-index --find-links=./polars_sim_wheel polars_sim
          
          # Verify the installation
          poetry run pip list | findstr polars
          poetry run python -c "import polars_sim; print('polars_sim successfully imported')"

      - name: Build Python services
        shell: pwsh
        run: |
          poetry run build_backends

      - name: Build Electron app for testing
        shell: pwsh
        working-directory: flowfile_frontend
        run: |
          npm install
          npm run build:test

      - name: Run integration tests
        shell: pwsh
        working-directory: flowfile_frontend
        run: |
          npm run test