name: Run Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - python-version: "3.10"
          - python-version: "3.11"
          - python-version: "3.12"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'  # Enable pip caching

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH

      # Cache the Poetry dependencies
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ matrix.python-version }}-

      # No need for separate Airbyte install - Poetry will handle it

      - name: Install Dependencies (excluding Airbyte)
        run: |
          poetry install --no-interaction --no-ansi

      # Cache the built polars-sim wheel
      - name: Cache polars-sim wheel
        id: cache-polars-sim-wheel
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip/wheels
          key: ${{ runner.os }}-pip-wheel-polars-sim-${{ matrix.python-version }}-${{ hashFiles('.github/workflows/run-tests.yml') }}

      # Install polars-sim - using the cached wheel if available
      - name: Install polars-sim with pip
        run: |
          if [ -d ~/.cache/pip/wheels ] && [ "$(find ~/.cache/pip/wheels -name "polars_sim*.whl" | wc -l)" -gt 0 ]; then
            echo "Installing polars-sim from cached wheel"
            pip install $(find ~/.cache/pip/wheels -name "polars_sim*.whl") --no-index
          else
            echo "Building and installing polars-sim"
            pip install git+https://github.com/edwardvaneechoud/polars_sim.git@main
          fi

      - name: Run pytest for flowfile_worker
        run: poetry run pytest flowfile_worker/tests --disable-warnings

      - name: Run pytest for flowfile_core
        run: poetry run pytest flowfile_core/tests --disable-warnings

  test-web:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: flowfile_frontend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'flowfile_frontend/package-lock.json'

      - name: Install Node Dependencies
        run: npm ci

      - name: Build Web Version
        run: npm run build:web

      - name: Run Vite Preview and Check Port Availability
        run: |
          # Start the preview server in the background
          npm run preview:web &
          # Wait for the server to fully start
          sleep 10
          # Verify that the server responds with a 200 OK on port 4173
          if ! curl -sI http://localhost:4173 | grep -q "200 OK"; then
            echo "Port 4173 is not available or did not return 200 OK"
            exit 1
          fi

  electron-tests-macos:
    runs-on: macos-latest
    needs:
      - backend-tests
      - test-web
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'flowfile_frontend/package-lock.json'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Poetry
        shell: bash
        run: |
          curl -sSL https://install.python-poetry.org | python -
          echo "${HOME}/.local/bin" >> $GITHUB_PATH

      # Cache Poetry dependencies for macOS
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/Library/Caches/pypoetry
          key: ${{ runner.os }}-poetry-3.11-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-3.11-

      - name: Install Python dependencies
        run: |
          poetry install

      # Cache the built polars-sim wheel for macOS
      - name: Cache polars-sim wheel
        id: cache-polars-sim-wheel-macos
        uses: actions/cache@v3
        with:
          path: ~/Library/Caches/pip/wheels
          key: ${{ runner.os }}-pip-wheel-polars-sim-3.11-${{ hashFiles('.github/workflows/run-tests.yml') }}

      # Install polars-sim - using the cached wheel if available
      - name: Install polars-sim with pip
        run: |
          if [ -d ~/Library/Caches/pip/wheels ] && [ "$(find ~/Library/Caches/pip/wheels -name "polars_sim*.whl" | wc -l)" -gt 0 ]; then
            echo "Installing polars-sim from cached wheel"
            pip install $(find ~/Library/Caches/pip/wheels -name "polars_sim*.whl") --no-index
          else
            echo "Building and installing polars-sim"
            pip install git+https://github.com/edwardvaneechoud/polars_sim.git@main
          fi

      - name: Build Python services
        run: |
          poetry run build_backends

      - name: Build Electron app for testing
        working-directory: flowfile_frontend
        run: |
          npm install
          npm run build:test

      - name: Run integration tests
        working-directory: flowfile_frontend
        run: |
          npm run test

  electron-tests-windows:
    runs-on: windows-latest
    needs:
      - backend-tests
      - test-web
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'flowfile_frontend/package-lock.json'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Poetry
        shell: pwsh
        run: |
          (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -
          echo "$env:APPDATA\Python\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      # Cache Poetry dependencies for Windows
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~\AppData\Local\pypoetry\Cache
          key: ${{ runner.os }}-poetry-3.11-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-3.11-

      - name: Install Python dependencies
        shell: pwsh
        run: |
          poetry install

      # Cache the built polars-sim wheel for Windows
      - name: Cache polars-sim wheel
        id: cache-polars-sim-wheel-windows
        uses: actions/cache@v3
        with:
          path: ~\AppData\Local\pip\Cache\wheels
          key: ${{ runner.os }}-pip-wheel-polars-sim-3.11-${{ hashFiles('.github/workflows/run-tests.yml') }}

      # Install polars-sim - using the cached wheel if available
      - name: Install polars-sim with pip
        shell: pwsh
        run: |
          $wheelPath = "~\AppData\Local\pip\Cache\wheels"
          if (Test-Path $wheelPath) {
            $wheel = Get-ChildItem -Path $wheelPath -Recurse -Filter "polars_sim*.whl" | Select-Object -First 1 -ExpandProperty FullName
            if ($wheel) {
              Write-Host "Installing polars-sim from cached wheel"
              pip install $wheel --no-index
            } else {
              Write-Host "Building and installing polars-sim"
              pip install git+https://github.com/edwardvaneechoud/polars_sim.git@main
            }
          } else {
            Write-Host "Building and installing polars-sim"
            pip install git+https://github.com/edwardvaneechoud/polars_sim.git@main
          }

      - name: Build Python services
        shell: pwsh
        run: |
          poetry run build_backends

      - name: Build Electron app for testing
        shell: pwsh
        working-directory: flowfile_frontend
        run: |
          npm install
          npm run build:test

      - name: Run integration tests
        shell: pwsh
        working-directory: flowfile_frontend
        run: |
          npm run test